{"version":3,"sources":["components/Form.js","components/NewTask.js","components/TaskList.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","minDate","Date","toISOString","slice","maxDate","parseInt","useState","textInput","setTextInput","dateInput","setDateInput","checkbox","setCheckbox","addTask","onSubmit","e","preventDefault","alert","htmlFor","type","id","placeholder","value","onChange","target","min","max","checked","NewTask","task","text","deadline","active","finishDate","important","deleteTask","changeTask","style","color","onClick","toLocaleString","TaskList","activeTasks","tasks","filter","tasksDone","sort","a","b","map","done","className","length","textDecoration","App","setTasks","idCounter","setIDCounter","newTask","tasksCopy","index","findIndex","splice","forEach","getTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e0f0a1e.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst Form = (props) => {\r\n   const minDate = new Date().toISOString().slice(0, 10);\r\n   const maxDate = `${parseInt(new Date().toISOString().slice(0, 4)) + 1}-12-31`;\r\n\r\n   const [textInput, setTextInput] = useState('');\r\n   const [dateInput, setDateInput] = useState(minDate);\r\n   const [checkbox, setCheckbox] = useState(false);\r\n\r\n   const { addTask } = props;\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      if(textInput === ''){\r\n         alert('You need to enter a valid task text')\r\n      }else{\r\n         addTask(textInput, dateInput, checkbox);\r\n      }\r\n\r\n      setTextInput('');\r\n      setDateInput(minDate);\r\n      setCheckbox(false);\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <label htmlFor=\"text\">Enter a task:</label>\r\n         <input \r\n            type=\"text\"\r\n            id='text'\r\n            placeholder='example text' \r\n            value={textInput}\r\n            onChange={e => setTextInput(e.target.value)}\r\n         />\r\n         <button>Add</button>\r\n         \r\n         <br />\r\n         <label htmlFor=\"date\">Pick a deadline</label>\r\n         <input \r\n            type=\"date\" \r\n            id='date' \r\n            value={dateInput}\r\n            onChange={e => setDateInput(e.target.value)}\r\n            min={minDate} \r\n            max={maxDate}\r\n         />\r\n         \r\n         <br/>\r\n         <label htmlFor=\"checkbox\">Important?</label>\r\n         <input \r\n            type=\"checkbox\" \r\n            id=\"checkbox\"\r\n            checked={checkbox}\r\n            onChange={e => setCheckbox(e.target.checked)}\r\n         />\r\n\r\n         <hr/>\r\n      </form>\r\n   );\r\n}\r\n \r\nexport default Form;","const NewTask = (props) => {\r\n   const { text, deadline, id, active, finishDate, important } = props.task;\r\n   const { deleteTask, changeTask } = props;\r\n\r\n   const styleImportant = {\r\n      color: 'red',\r\n   }\r\n\r\n   if(active){\r\n      return (\r\n         <div>\r\n            <p style={ important ? styleImportant : null }>\r\n               { text } - to: { deadline }\r\n               <button onClick={() => changeTask(id)}>DONE</button>\r\n               <button onClick={() => deleteTask(id)}>X</button>\r\n            </p>\r\n         </div>\r\n      );\r\n   }else{\r\n      return (\r\n         <div>\r\n            <p><strong>{ text }</strong> - <em>finished: { new Date(finishDate).toLocaleString() }</em></p>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n \r\nexport default NewTask;","import NewTask from \"./NewTask\"\r\n\r\nconst TaskList = (props) => {\r\n   const activeTasks = props.tasks.filter(task => task.active);\r\n   const tasksDone = props.tasks.filter(task => !task.active);\r\n\r\n   activeTasks.sort((a, b) => {\r\n      if(a.deadline < b.deadline) return -1;\r\n      if(a.deadline > b.deadline) return 1;\r\n      return 0;\r\n   });\r\n\r\n   const active = activeTasks.map(task => <NewTask key={task.id} task={task} deleteTask={props.deleteTask} changeTask={props.changeTask}/>)\r\n   const done = tasksDone.map(task => <NewTask key={task.id} task={task} deleteTask={props.deleteTask} changeTask={props.changeTask}/>)\r\n\r\n   return (\r\n      <div>\r\n         <h2>TaskList</h2>\r\n\r\n         <div className=\"tasksActive\">\r\n            { active.length === 0 ? <p>Everything's done</p> : <h3>tasksActive: (<span>{ active.length }</span>)</h3> }\r\n            { active }\r\n         </div>\r\n\r\n         <hr/>\r\n\r\n         <div className=\"tasksDone\">\r\n            <h3>tasksDone: (<span className='nbrOfTasksDone'>{ done.length }</span>)</h3>\r\n            { done.length > 5 && <p style={{textDecoration: 'underline'}}>Only last 5 tasks are displayed</p> }\r\n            { done.slice(0, 5) }\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n \r\nexport default TaskList;","import '../App.css';\nimport Form from './Form';\nimport TaskList from './TaskList';\n\nimport { useState } from 'react';\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n      {\n        id: 0,\n        text: 'Finish this app',\n        deadline: '2021-04-15',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'Send some CVs',\n        deadline: '2021-04-19',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'Example 3',\n        deadline: '2021-06-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: 'Example 4',\n        deadline: '2021-04-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 4,\n        text: 'Example 5',\n        deadline: '2021-05-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 5,\n        text: 'Example 6',\n        deadline: '2021-04-16',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 6,\n        text: 'Example 7',\n        deadline: '2021-04-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 7,\n        text: 'Example 8',\n        deadline: '2021-04-15',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n  ]);\n  const [idCounter, setIDCounter] = useState(8);\n\n  const addTask = (text, deadline, important) => {\n    const newTask = {\n      id: idCounter,\n      text,\n      deadline,\n      important,\n      active: true,\n      finishDate: null,\n    }\n    setIDCounter(idCounter + 1);\n    setTasks([...tasks, newTask]);\n  }\n\n  const deleteTask = (id) => {\n    const tasksCopy = [...tasks];\n    const index = tasksCopy.findIndex(task => task.id === id);\n    tasksCopy.splice(index, 1);\n    setTasks(tasksCopy);\n  }\n\n  const changeTaskState = (id) => {\n    const tasksCopy = [...tasks];\n    tasksCopy.forEach(task => {\n      if(task.id === id){\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    setTasks(tasksCopy);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React to do list</h1>\n      <Form addTask={addTask}/>\n      <TaskList tasks={tasks} deleteTask={deleteTask} changeTask={changeTaskState}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}